library(HestonEMcpp)
rcpparma_hello_world()
rcpparma_outerproduct
library(HestonEMcpp)
Rcpp::sourceCpp('D:/Google Drive/R/P8_Backup(06052021)/P8/Y.euler.sim.cpp')
library(HestonEMcpp)
library(HestonEMcpp)
remove.packages("HestonEMcpp", lib="~/R/win-library/4.0")
Rcpp::sourceCpp('src/Y.euler.sim.cpp(fix).cpp')
library(HestonEMcpp)
Rcpp::sourceCpp('src/Y.euler.sim.fix.cpp')
Rcpp::sourceCpp('src/Y.euler.sim.fix.cpp')
Rcpp::sourceCpp('src/Y.euler.sim.fix.cpp')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(parallel)
library(latex2exp)
library(HestonEMcpp)
library(ggplot2)
B.motion <- function(n=100, seed=FALSE, Tt=1){
#Function that simulate a Brownian Motion
if(seed != FALSE){set.seed(seed)}
deltaN <- Tt/n
B <- sqrt(deltaN)*rnorm(n, mean = 0, sd = 1)
B <- c(0,cumsum(B))
return(B)
}
F.mc <- function(Y, K=1, r=0, Tt=1, t=0){
#Function that extracts, S_T,
#from #M simulations and finds Monte Carlo estimate of (S_T-K)^+
m <- length(Y[[1]])
tmp <- sapply(Y, nth, m/2)
tmp <- tmp-K
tmp[which( tmp <= 0)] <- 0
OP <- exp(-r*(Tt-t))*mean(tmp, na.rm = TRUE)
res <- list(OP = OP, process = tmp)
}
unif.ctrl <- function(x,n) runif(n, min = x[1], max = x[2])
rnd.grid <- function(n=100000,r=c(0,.04),rho=c(-.9,0),
alpha=c(.51,1.5),lambda =c(0,.5),sigmaV=c(.01,.8),
V0=c(0.05,.5),K=c(.80,1.20), Tt=c(.2,2)){
tmp <- list(r,rho,alpha,lambda,sigmaV,V0,K,Tt)
res <- sapply(tmp, unif.ctrl, n)
}
OPrice.MC <- function(init, n=1000, M=1000){
Y <- vector("list",M)
for (i in 1:M) {
B <- cbind(B.motion(n),B.motion(n))
Y[[i]] <- Y_euler_sim_cpp(B,n,0,
init[8], c(1,init[6]),
init[1], init[3],
init[4], init[5],
init[2])
}
names(Y) <- sprintf("Y%d",seq(1:M))
F_mc <- F.mc(Y, K=init[7], r=init[1], Tt=init[8])
res <- list(estimate=F_mc$OP)
}
BS.OPrice <- function(S=1, K=1, Tt=1, r=0, vol=.3){
d1 <- (log(S/K)+(r+vol^2/2)*Tt)/(vol*sqrt(Tt))
d2 <- d1-vol*sqrt(Tt)
C <- S*pnorm(d1)-K*exp(-r*Tt)*pnorm(d2)
return(C)
}
IV <- function(S,K,Tt,r,vol0 = .05, C_heston){
vol <- vol0
fvol <- 1
while(abs(fvol) >= .Machine$double.eps) {
d1 <- (log(S/K)+(r+vol^2/2)*Tt)/(vol*sqrt(Tt))
fvol <- BS.OPrice(S, K, Tt, r, vol) - C_heston
dfvol <- S*dnorm(d1)*sqrt(Tt)
vol = vol - fvol/dfvol
}
}
take_last <- function(x){
n <- dim(x[[1]])[1]
res <- sapply(x, "[", n)
return(res)
}
Rcpp::sourceCpp('src/Y.euler.sim.fix.cpp')
n=1000
M=1000
init
init <- c(0.030584318, -0.4176004, 1.0614910, 0.4713586, 0.6264408, 0.10358190)
Y <- vector("list",M)
for (i in 1:M) {
B <- cbind(B.motion(n),B.motion(n))
Y[[i]] <- Y_euler_sim_cpp(B,n,0,
init[8], c(1,init[6]),
init[1], init[3],
init[4], init[5],
init[2])
}
names(Y) <- sprintf("Y%d",seq(1:M))
F_mc <- F.mc(Y, K=init[7], r=init[1], Tt=init[8])
res <- list(estimate=F_mc$OP)
res
Rcpp::sourceCpp('src/Y.euler.sim.fix.cpp')
Rcpp::sourceCpp('src/Y.euler.sim.fix.cpp')
View(Y_euler_sim_cpp)
View(Y_euler_sim_cpp)
Rcpp::sourceCpp('src/Y.euler.sim.fix.cpp')
B.motion <- function(n=100, seed=FALSE, Tt=1){
#Function that simulate a Brownian Motion
if(seed != FALSE){set.seed(seed)}
deltaN <- Tt/n
B <- sqrt(deltaN)*rnorm(n, mean = 0, sd = 1)
B <- c(0,cumsum(B))
return(B)
}
F.mc <- function(Y, K=1, r=0, Tt=1, t=0){
#Function that extracts, S_T,
#from #M simulations and finds Monte Carlo estimate of (S_T-K)^+
m <- length(Y[[1]])
tmp <- sapply(Y, nth, m/2)
tmp <- tmp-K
tmp[which( tmp <= 0)] <- 0
OP <- exp(-r*(Tt-t))*mean(tmp, na.rm = TRUE)
res <- list(OP = OP, process = tmp)
}
unif.ctrl <- function(x,n) runif(n, min = x[1], max = x[2])
rnd.grid <- function(n=100000,r=c(0,.04),rho=c(-.9,0),
alpha=c(.51,1.5),lambda =c(0,.5),sigmaV=c(.01,.8),
V0=c(0.05,.5),K=c(.80,1.20), Tt=c(.2,2)){
tmp <- list(r,rho,alpha,lambda,sigmaV,V0,K,Tt)
res <- sapply(tmp, unif.ctrl, n)
}
OPrice.MC <- function(init, n=1000, M=1000){
Y <- vector("list",M)
for (i in 1:M) {
B <- cbind(B.motion(n),B.motion(n))
Y[[i]] <- Y_euler_sim_cpp(B,n,0,
init[8], c(1,init[6]),
init[1], init[3],
init[4], init[5],
init[2])
}
names(Y) <- sprintf("Y%d",seq(1:M))
F_mc <- F.mc(Y, K=init[7], r=init[1], Tt=init[8])
res <- list(estimate=F_mc$OP)
}
BS.OPrice <- function(S=1, K=1, Tt=1, r=0, vol=.3){
d1 <- (log(S/K)+(r+vol^2/2)*Tt)/(vol*sqrt(Tt))
d2 <- d1-vol*sqrt(Tt)
C <- S*pnorm(d1)-K*exp(-r*Tt)*pnorm(d2)
return(C)
}
IV <- function(S,K,Tt,r,vol0 = .05, C_heston){
vol <- vol0
fvol <- 1
while(abs(fvol) >= .Machine$double.eps) {
d1 <- (log(S/K)+(r+vol^2/2)*Tt)/(vol*sqrt(Tt))
fvol <- BS.OPrice(S, K, Tt, r, vol) - C_heston
dfvol <- S*dnorm(d1)*sqrt(Tt)
vol = vol - fvol/dfvol
}
}
take_last <- function(x){
n <- dim(x[[1]])[1]
res <- sapply(x, "[", n)
return(res)
}
library(tidyverse)
library(parallel)
library(latex2exp)
library(ggplot2)
init <- c(0.030584318, -0.4176004, 1.0614910, 0.4713586, 0.6264408, 0.10358190)
MC.analy <- function(init, n, M){
Y <- vector("list",M)
for (i in 1:M) {
B <- cbind(B.motion(n),B.motion(n))
Y[[i]] <- Y_euler_sim_cpp(B,n,0,
init[8], c(1,init[6]),
init[1], init[3],
init[4], init[5],
init[2])
}
names(Y) <- sprintf("Y%d",seq(1:M))
F_mc <- F.mc(Y, K=init[7], r=init[1], Tt=init[8])
res <- F_mc$process
mu <- mean(res)
MC_sd <- sd(res)
c_int <- c(mu - 1.96*MC_sd/sqrt(M), mu + 1.96*MC_sd/sqrt(M))
res <- list(mu = mu, conf = c_int, vals = res, Y = Y)
}
true_par <- c(0.02,-0.5, .75, .25, .4, .25);true_par
init <- c(true_par, 1,1)
res1000 <- MC.analy(init, 1000, 1000)
res10000 <- MC.analy(init, 1000, 10000)
plot(seq(0,1, length = 1001),res1000$Y[[1]][,1], type = "l", ylim = c(-1,4),
main = latex2exp::TeX("100 simulations of S_t"),
xlab = "t",
ylab = latex2exp::TeX("S_t")
)
for(i in 1:100){
lines(seq(0,1, length = 1001),res1000$Y[[i]][,1], col = randomcoloR::randomColor(hue = "random"))
}
res1000 <- MC.analy(init, 1000, 1000)
res10000 <- MC.analy(init, 1000, 10000)
plot(seq(0,1, length = 1001),res1000$Y[[1]][,1], type = "l", ylim = c(-1,4),
main = latex2exp::TeX("100 simulations of S_t"),
xlab = "t",
ylab = latex2exp::TeX("S_t")
)
for(i in 1:100){
lines(seq(0,1, length = 1001),res1000$Y[[i]][,1], col = randomcoloR::randomColor(hue = "random"))
}
res1000 <- MC.analy(init, 1000, 1000)
res10000 <- MC.analy(init, 1000, 10000)
plot(seq(0,1, length = 1001),res1000$Y[[1]][,1], type = "l", ylim = c(-1,4),
main = latex2exp::TeX("100 simulations of S_t"),
xlab = "t",
ylab = latex2exp::TeX("S_t")
)
for(i in 1:100){
lines(seq(0,1, length = 1001),res1000$Y[[i]][,1], col = randomcoloR::randomColor(hue = "random"))
}
res1000 <- MC.analy(init, 1000, 1000)
res10000 <- MC.analy(init, 1000, 10000)
plot(seq(0,1, length = 1001),res1000$Y[[1]][,1], type = "l", ylim = c(-1,4),
main = latex2exp::TeX("100 simulations of S_t"),
xlab = "t",
ylab = latex2exp::TeX("S_t")
)
for(i in 1:100){
lines(seq(0,1, length = 1001),res1000$Y[[i]][,1], col = randomcoloR::randomColor(hue = "random"))
}
res1000 <- MC.analy(init, 1000, 1000)
res10000 <- MC.analy(init, 1000, 10000)
plot(seq(0,1, length = 1001),res1000$Y[[1]][,1], type = "l", ylim = c(-1,5),
main = latex2exp::TeX("100 simulations of S_t"),
xlab = "t",
ylab = latex2exp::TeX("S_t")
)
for(i in 1:100){
lines(seq(0,1, length = 1001),res1000$Y[[i]][,1], col = randomcoloR::randomColor(hue = "random"))
}
remove.packages("HestonEMcpp", lib="~/R/win-library/4.0")
library(rtools)
library(devtools)
library(devtools)
library(HestonEMcpp)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
## "C:\\rtools40\\usr\\bin\\make.exe"
install.packages("jsonlite", type = "source")
library(HestonEMcpp)
